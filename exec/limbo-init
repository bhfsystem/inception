#!/usr/bin/env bash

nm_lxd=
ip_dream=
host=""

function lxd_host {
  (command "${host[@]}" "$@")
}

function lxc {
  (env https_proxy= lxc "$@")
}

function vagrant_host {
  (unset VAGRANT_DEFAULT_PROVIDER; limbo vagrant ssh -- "$@")
}

function disable_cloud_init_network {
    cat <<EOF | "$@" tee /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
network: {config: disabled}
EOF

    cat <<EOF | "$@" tee /etc/network/interfaces.d/50-cloud-init.cfg
auto lo
iface lo inet loopback
EOF
}

function setup_fan_network_dhcp {
  cat <<EOF | "$@" tee /etc/network/interfaces.d/99-limbo-fan.cfg
auto eth0
iface eth0 inet manual

auto br0
iface br0 inet dhcp
    bridge-ifaces eth0
    bridge-ports eth0
    bridge-ifaces eth0
    bridge-ports eth0
    up ifconfig eth0 up
EOF
}

function setup_fan_network_static {
  cat <<EOF | "$@" sudo tee /etc/network/fan
${BASEBOX_IP}/16 250.0.0.0/8 --enable --dhcp
${BASEBOX_IP}/16 251.0.0.0/8 --enable
${BASEBOX_IP}/16 252.0.0.0/8 --enable
${BASEBOX_IP}/16 253.0.0.0/8 --enable
${BASEBOX_IP}/16 254.0.0.0/8 --enable
${BASEBOX_IP}/16 255.0.0.0/8 --enable
EOF

  cat <<EOF | "$@" sudo tee /etc/network/interfaces.d/99-limbo-fan.cfg
auto enp0s9
iface enp0s9 inet manual

auto br0
iface br0 inet static
    address ${BASEBOX_IP}
    gateway ${BASEBOX_IP%.*}.1
    network ${BASEBOX_IP%.*}.0
    gateway ${BASEBOX_IP%.*}.255
    netmask 255.255.255.0
    bridge-ifaces enp0s9
    bridge-ports enp0s9
    up ifconfig enp0s9 up
EOF
}

function disable_lxd_bridge {
  cat <<EOF | "$@" sudo tee /etc/default/lxd-bridge
USE_LXD_BRIDGE="false"
LXD_BRIDGE="lxdbr0"
UPDATE_PROFILE="false"
LXD_CONFILE=""
LXD_DOMAIN=""
LXD_IPV4_ADDR=""
LXD_IPV4_NETMASK=""
LXD_IPV4_NETWORK=""
LXD_IPV4_DHCP_RANGE=""
LXD_IPV4_DHCP_MAX=""
LXD_IPV4_NAT="true"
LXD_IPV6_ADDR=""
LXD_IPV6_MASK=""
LXD_IPV6_NETWORK=""
LXD_IPV6_NAT="false"
LXD_IPV6_PROXY="false"
EOF
}

function install_lxd_docker {
  "$@" sudo add-apt-repository -y ppa:ubuntu-lxc/lxd-stable
  "$@" sudo apt update
  "$@" sudo env DEBIAN_FRONTEND=noninteractive apt -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y lxd zfsutils-linux criu lxd-tools docker.io
  "$@" sudo env DEBIAN_FRONTEND=noninteractive apt -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade -y
}

function reload_vagrant_host {
  "${BASEBOX_DREAM}" vagrant reload
}

function setup_limbo_from_lxd {
  host=(lxc exec "${BASEBOX_DREAM}:${BASEBOX_DREAMER}" --)
  lxc list --format=json "${BASEBOX_DREAM}:${BASEBOX_DREAMER}"
  fl_privileged=true
  if_parent='br0'
  ip_lxd
}

function setup_limbo_from_vagrant {
  host=("${BASEBOX_DREAM}" vagrant ssh --)
  fl_privileged=false
  if_parent='fan-250'

  local network="$1"; shift

  setup_fan_network_${network} "$@"
  disable_lxd_bridge "$@"
  install_lxd_docker "$@"
  wait_cloud_init lxd_host
  reload_vagrant_host
  wait_cloud_init lxd_host
  run_cloud_init lxd_host
  lxd_host sudo ifup br0 || true
  lxd_host sudo fanctl up -a
  lxd_host ifconfig -a
}

function setup_limbo_from_snapshot {
  host=(lxc exec "${BASEBOX_DREAM}:${nm_lxd}" --)
  lxc copy "${BASEBOX_DREAM}:$nm_snapshot" "${BASEBOX_DREAM}:${nm_lxd}"
  lxc start "${BASEBOX_DREAM}:${nm_lxd}"
  wait_cloud_init lxd_host
  lxd_host ifdown br0 || true
  lxd_host ifup br0 || true
  ip_lxd
}

function setup_limbo_from_scratch {
  host=(lxc exec "${BASEBOX_DREAM}:${nm_lxd}" --)
  lxc launch ubuntu:16.04 "${BASEBOX_DREAM}:${nm_lxd}" -p default -p docker -p limbo -c boot.autostart=false
  lxd_host touch /root/.cloud-init.hostname
  wait_cloud_init lxd_host
  run_cloud_init lxd_host

  disable_cloud_init_network lxd_host
  setup_fan_network_dhcp lxd_host
  lxc restart "${BASEBOX_DREAM}:${nm_lxd}"
  wait_cloud_init lxd_host
  ip_lxd
}

function setup_access {
  "$@" sudo usermod -aG lxd ubuntu
  "$@" sudo usermod -aG docker ubuntu
  "$@" sudo systemctl start lxd
  "$@" lxc config set core.https_address '[::]'
  "$@" lxc config set core.trust_password "$lxd_pass"
}

function setup_remote {
  "$@" lxc remote set-default local
  "$@" lxc remote remove "$nm_lxd" || true
  "$@" lxc remote add --accept-certificate --password="$lxd_pass" "$nm_lxd" "$ip_dream" 
}

function setup_limbo_profile {
  lxc profile create "${nm_lxd}":limbo 2>/dev/null || true
  lxc profile set "${nm_lxd}":limbo user.user-data - < "$shome/cidata/user-data"
  lxc profile set "${nm_lxd}":limbo security.privileged "$fl_privileged"
  lxc profile set "${nm_lxd}":limbo security.nesting true
  lxc profile set "${nm_lxd}":limbo user.network_mode "dhcp"
  lxc profile unset "${nm_lxd}":limbo environment.proxy_http
  if "$@" lxc profile device add limbo eth0 nic nictype=bridged parent="$if_parent"; then true; fi
  "$@" lxc profile device set limbo eth0 nictype bridged
  "$@" lxc profile device set limbo eth0 parent "$if_parent"
  "$@" lxc profile device set limbo eth0 mtu 1498
}

function wait_cloud_init {
  while true; do
    case "$(echo | "$@" systemctl is-active cloud-final.service)" in
      active|failed) break ;;
      *) sleep 2 ;;
    esac
  done

  while true; do
    case "$(echo | "$@" systemctl is-active network-online.target)" in
      active|failed) break ;;
      *) sleep 2 ;;
    esac
  done
}

function run_cloud_init {
  for a in 1 2; do
    "$@" sudo rm -f /var/lib/cloud/instance
    "$@" sudo cloud-init init
  done
}

function setup_lxd_docker {
  install_lxd_docker  lxd_host
  setup_access        lxd_host
  setup_remote
  setup_limbo_profile lxd_host
}

function ip_lxd {
  wait_cloud_init lxd_host
  ip_dream="$(lxc list --format=json "${BASEBOX_DREAM}:${nm_lxd}" | jq -r '[[.[].state.network | [.br0//[],.eth0//[]]] | flatten[].addresses | map(select(.family == "inet"))] | flatten[0].address')"
}

function setup_docker {
  lxd_host sudo rm -f /etc/docker/key.json
  docker machine rm -f "$nm_lxd" 2>/dev/null || true

  case "$ip_dream" in
    250.*) fixed_cidr="${ip_dream%.*}.0" ;;
        *) fixed_cidr="250.${ip_dream#*.*.}.0" ;;
  esac

  local fs_docker="btrfs"
  if [[ "$nm_lxd" == "$BASEBOX_DREAM" ]]; then
    fs_docker="overlay"
  fi

  lxd_host sudo systemctl start docker.service
  docker machine regenerate-certs -f "$nm_lxd" || true
  docker machine create --driver generic --generic-ip-address "$ip_dream" --generic-ssh-user ubuntu \
    --engine-install-url="" \
    --engine-storage-driver="$fs_docker" \
    --engine-opt="bridge=$if_parent" \
    --engine-opt="mtu=1480" \
    --engine-opt="iptables=false" \
    --engine-opt="fixed-cidr=${fixed_cidr}/24" \
    --engine-opt="insecure-registry=${CACHE_VIP}:5000" \
    --engine-opt="insecure-registry=${CACHE_VIP}:5001" \
    "$nm_lxd"
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  
  set -x

  unset http_proxy https_proxy

  eval $(docker machine env --no-proxy "${BASEBOX_MACHINE:-$BASEBOX_INSTANCE}" 2>/dev/null)

  # vars
  local lxd_pass="ubuntu"
  local fl_privileged="true"
  local if_parent="br0"

  # install
  local kind_of_host="${1:-}"
  case "${kind_of_host}" in
    "")
      main "${BASEBOX_DREAM}"
      main "${BASEBOX_NAME}"
      ;;
    "${BASEBOX_DREAM}")
      nm_lxd="${BASEBOX_DREAM}" # plane
      ip_dream="$BASEBOX_IP"
      setup_limbo_from_vagrant static lxd_host
      setup_lxd_docker
      limbo network init
      setup_docker
      ;;
    "${BASEBOX_NAME}") # inception
      nm_lxd="${BASEBOX_NAME}"
      setup_limbo_from_scratch
      setup_lxd_docker
      setup_docker
      ;;
    lxd)
      nm_lxd="${BASEBOX_DREAMER}"
      setup_limbo_from_lxd
      setup_lxd_docker
      ;;
    test)
      nm_lxd="${BASEBOX_DREAM}" # plane
      ip_dream="$BASEBOX_IP"
      host=("${BASEBOX_DREAM}" vagrant ssh --)
      fl_privileged=false
      if_parent='fan-250'
      setup_limbo_profile lxd_host
      ;;
    *) # fischer
      nm_lxd="${kind_of_host}"
      local nm_snapshot="${BASEBOX_NAME}/${BASEBOX_NAME}0"
      setup_limbo_from_snapshot
      setup_docker
      ;;
  esac
}

source sub "$BASH_SOURCE" "$@"
